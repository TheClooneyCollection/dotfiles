#+TITLE: Spacemacs Configuration

#+name: org-bable-execute does not work anymore?
#+BEGIN_SRC emacs-lisp
    ;(spacemacs/recompile-elpa t) ; FORCE recompele all files with SPC u
#+END_SRC

#+begin_src emacs-lisp
  (setenv "SHELL" "/opt/homebrew/bin/fish")
  (setq shell-file-name "/opt/homebrew/bin/fish"
        explicit-shell-file-name shell-file-name)
#+end_src

* Fixes

  #+begin_src emacs-lisp :results output
    (defun spacemacs/objective-c-file-p ()
      (and buffer-file-name
           (string= (file-name-extension buffer-file-name) "m")
           (re-search-forward "@interface"
                              magic-mode-regexp-match-limit t)))

    (add-to-list 'magic-mode-alist
                 (cons #'spacemacs/objective-c-file-p #'objc-mode))
  #+end_src

* Key bindings
** =TAB= to toggle fold

   #+BEGIN_SRC emacs-lisp
   (define-key evil-normal-state-map (kbd "TAB") #'evil-toggle-fold)
   #+END_SRC

** =;= <-> =:= in every modes

   #+BEGIN_SRC emacs-lisp
     (global-set-key ":" #'(lambda () (interactive) (insert ";")))
     (global-set-key ";" #'(lambda () (interactive) (insert ":")))
   #+END_SRC

** =f= and =t=

   #+BEGIN_SRC emacs-lisp
     (let ((goto-char #'evil-avy-goto-char-timer))
       (define-key evil-normal-state-map "f" goto-char)
       (define-key evil-motion-state-map "f" goto-char))
     (define-key evil-visual-state-map "f" #'evil-avy-goto-char-in-line)
     (define-key evil-operator-state-map "f" #'evil-avy-goto-char-in-line)

     (defun evil-avy-find-char-to-in-line ()
       "Somehow this magically makes `evil-avy-goto-char' works as `evil-find-char-to'"
       (interactive)
       (evil-avy-goto-char-in-line))

     (define-key evil-visual-state-map "t" #'evil-avy-find-char-to-in-line)
     (define-key evil-operator-state-map "t" #'evil-avy-find-char-to-in-line)
   #+END_SRC

** =SPC [0-9]=

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "0" #'delete-other-windows)
     (spacemacs/set-leader-keys "7" #'async-shell-command)
     (spacemacs/set-leader-keys "9" #'td/zen)
   #+END_SRC

** =SPC bs= to open project's scratch buffer

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "bs" #'td/switch-to-project-s-scratch-buffer)
   #+END_SRC

** =SPC fee= to edit configurations

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "fee" #'td/edit-configuration)
   #+END_SRC

** =SPC jj= and =SPC jk=

   #+BEGIN_SRC emacs-lisp

     (evil-define-avy-motion avy-goto-line-above line)
     (evil-define-avy-motion avy-goto-line-below line)

     (spacemacs/set-leader-keys
       "jj" #'evil-avy-goto-line-below
       "jk" #'evil-avy-goto-line-above)
   #+END_SRC
** =SPC mu= in slack-mode for selecting unread messages

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys-for-major-mode 'slack-mode
       "u" #'slack-select-unread-rooms)
   #+END_SRC

** =SPC oo= to edit =org-default-notes-file=
   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "on" #'(lambda ()
                                        (interactive)
                                        (find-file (org-file-path (format-time-string "%Y-%m-%d.org")))))

     (spacemacs/set-leader-keys "oo" #'(lambda ()
                                        (interactive)
                                        (find-file (or (org-file-path-or-nil "work/notes.org")
                                                       org-default-notes-file))))

     (spacemacs/set-leader-keys "ow" #'(lambda ()
                                         (interactive)
                                         (find-file (or (org-file-path-or-nil "work/work.org")
                                                        (org-file-path-or-nil "work.org")))))
   #+END_SRC

* Evil

** Do replace with case-sensitivity

  #+begin_src emacs-lisp :results output
    (setq evil-ex-substitute-case t
          evil-ex-search-case nil)
  #+end_src

  #+RESULTS:

** Don't copy whatever I delete into the copy/paste kill-ring, please

  #+begin_src emacs-lisp :results output
    (setq evil-kill-on-visual-paste nil)
  #+end_src

** Don't quit on me even if I say so!

   This works in most cases unless I am editing in Org source... Oh well...

  #+begin_src emacs-lisp :results output
    (evil-ex-define-cmd "wq" #'(lambda ()
                                 (interactive)
                                 (save-buffer)
                                 (kill-this-buffer)))
    (evil-ex-define-cmd "q[uit]" 'evil-quit )
    (evil-ex-define-cmd "wqa" 'evil-write-all )

    (defun with-editor-evil-setup ()
      (evil-ex-define-cmd "wq" 'with-editor-finish))

    (add-hook 'with-editor-mode-hook 'with-editor-evil-setup)
    (add-hook 'org-source-mode-hook #'(lambda ()
                                        (interactive)
                                        (org-edit-src-exit)))
#+end_src

* Toggles

** auto-fill-mode

   #+BEGIN_SRC emacs-lisp
     (spacemacs/toggle-auto-fill-mode-on)
   #+END_SRC
** golden-ratio

   #+BEGIN_SRC emacs-lisp
     (spacemacs/toggle-golden-ratio-on)
   #+END_SRC
** centered-cursor

   #+BEGIN_SRC emacs-lisp
     (spacemacs/toggle-centered-point-globally-on)
   #+END_SRC

* Functions
** Date and Time
*** Yesterday

    #+BEGIN_SRC emacs-lisp :results output
      (defun td/yesterday ()
        "The time now, but yesterday"
        (let ((day (* (* 60 60) 24)))
          (time-subtract (current-time) day)))
    #+END_SRC

*** Format time into string

    #+BEGIN_SRC emacs-lisp :results output
      (defun td/format-time-string (&optional time)
        "Format the time TIME, or now if omitted or nil,
      into strings like \"Tuesday, 16 October 2018, Week 42\"."
        (format-time-string "%A, %d %B %Y, Week %W" time))
    #+END_SRC

** Edit Spacemacs's configuration

   #+BEGIN_SRC emacs-lisp
     (defun td/edit (filename)
       (find-file (concat dotspacemacs-directory filename)))

     (defun td/edit-configuration ()
       (interactive)
       (td/edit "configuration.org"))
   #+END_SRC

** Dedicate a window's purpose

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'window-purpose-core
       (defun td/dedicate-window-purpose ()
         (interactive)
         (purpose-set-window-purpose-dedicated-p nil t)))
   #+END_SRC

* Behaviors
** Split windows horizontally

   #+BEGIN_SRC emacs-lisp
     (setq split-width-threshold 0
           split-height-threshold nil)

   #+END_SRC

** Save buffers when losing focus

   #+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook #'(lambda () (save-some-buffers t)))
   #+END_SRC

* My own code
** Refactoring Swift


    [[https://github.com/ajvargo/ruby-refactor/blob/master/ruby-refactor.el][ruby-refactor/ruby-refactor.el at master · ajvargo/ruby-refactor · GitHub]]
    [[https://github.com/Wilfred/emacs-refactor/blob/master/emr.el][emacs-refactor/emr.el at master · Wilfred/emacs-refactor · GitHub]]

*** Format one-line parameters into multi-lines

    #+BEGIN_SRC emacs-lisp
      (defun td/swift/format-oneline-params-into-multiline (param-string)
        (format "\n%s\n" (replace-regexp-in-string ", *" ",\n" param-string)))
    #+END_SRC

    #+RESULTS:
    : td/swift/format-oneline-params-into-multiline

    #+name: test formatting
    #+BEGIN_SRC emacs-lisp :results output
      (print
       (td/swift/format-oneline-params-into-multiline "name: String,age: Int, sex: Sex")
       )
      (print
       (td/swift/format-oneline-params-into-multiline "name: String, age: Int, sex: Sex")
       )
      (print
       (td/swift/format-oneline-params-into-multiline "either: Either<Left, right>, name: String, age: Int")
       )
    #+END_SRC

    #+RESULTS: test formatting
    #+begin_example

    "
    name: String,
    age: Int,
    sex: Sex
    "

    "
    name: String,
    age: Int,
    sex: Sex
    "

    "
    either: Either<Left,
    right>,
    name: String,
    age: Int
    "
    #+end_example

    #+BEGIN_SRC swift
      (name: String, age: Int, sex: Sex)
    #+END_SRC

*** Split one-line parameters into multi-lines (universal)

    #+BEGIN_SRC emacs-lisp :results output
      (defun td/swift/current-line-has-parentheses-p ()
        (interactive)
        (let ((line (thing-at-point 'line)))
          (td/swift//line-has-parentheses-p line)))

      (defun td/swift//line-has-parentheses-p (line)
        (let* ((index-of-start (string-match-p "(" line))
               (index-of-end (string-match-p ")" line)))

           (and index-of-start
                index-of-end
                (< index-of-start index-of-end))))


      (defun td/swift/split-oneline-params-into-multiline ()
        (interactive)
        (let* ((line (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
               (has-starting-parenthesis (string-match-p "(" line))
               (has-ending-parenthesis (string-match-p ")" line)))

          (print has-starting-parenthesis)
          (print has-ending-parenthesis)
          )
        )
    #+END_SRC

    #+RESULTS:

    #+name: test line has parens
    #+BEGIN_SRC emacs-lisp :results output
      (print
       (td/swift//line-has-parentheses-p "()"))
      (print
       (td/swift//line-has-parentheses-p "("))
      (print
       (td/swift//line-has-parentheses-p ")"))
      (print
       (td/swift//line-has-parentheses-p ")("))
    #+END_SRC

    #+RESULTS: test line has parens
    :
    : t
    :
    : nil
    :
    : nil
    :
    : nil


*** Split one-line parameters into multi-lines (when selected in evil-visual mode)

    #+BEGIN_SRC emacs-lisp :results output
      (defun td/swift/visual/split-oneline-params-into-multiline ()
        (interactive)
        (let* ((visual-range (evil-visual-range))
               (start (evil-range-beginning visual-range))
               (end (evil-range-end visual-range))
               (param-string (buffer-substring start end))
               (multiline-param-string (td/swift/format-oneline-params-into-multiline param-string)))

          (delete-region start end)
          (insert multiline-param-string)
          (forward-line)

          (indent-region start (point))))
    #+END_SRC

*** Tired of writing =public init= (generate lets and assigns automatically)

    #+BEGIN_SRC emacs-lisp
      (defun td/swift/param-pairs-from (param-string)
        (let*
            ((string-pairs (split-string param-string ", ")))

          (mapcar #'(lambda (string) (split-string string ": ")) string-pairs))
      )

      (defun td/swift/lets-from (param-string)
        (let*
            ((param-pairs (td/swift/param-pairs-from param-string))
             (lets (mapcar #'(lambda (pair) (format "public let %s: %s" (car pair) (cadr pair))) param-pairs)))

          (string-join lets "\n")))

      (defun td/swift/assigns-from (param-string)
        (let*
            ((param-pairs (td/swift/param-pairs-from param-string))
             (assigns (mapcar#'(lambda (pair) (format "self.%s = %s" (car pair) (car pair))) param-pairs)))

          (string-join assigns "\n")))
    #+END_SRC

    #+name: test generations
    #+BEGIN_SRC emacs-lisp :results output
      (print
       (td/swift/assigns-from "name: String, age: Int, sex: Sex")
       )

      (print
       (td/swift/lets-from "name: String, age: Int, sex: Sex")
       )
    #+END_SRC

    #+RESULTS: tests
    :
    : "self.name = name
    : self.age = age
    : self.sex = sex"
    :
    : "let name: String
    : let age: Int
    : let sex: Sex"

* Packages

** alert

   #+BEGIN_SRC emacs-lisp
     (defun td/alert-notifier-notify (info)
       "Derived from the `alert-notifier-notify' function with added `-timeout' parameter"
       (if alert-notifier-command
           (let ((args
                  (list "-title"   (alert-encode-string (plist-get info :title))
                        "-appIcon" (or (plist-get info :icon) alert-notifier-default-icon)
                        "-message" (alert-encode-string (plist-get info :message))
                        "-timeout" (number-to-string alert-fade-time))))
             ;; Adding the `timeout' param will cause `terminal-notifier' to block the process.
             ;; Thus we are calling `async-start-process' here.
             (apply #'async-start-process "emamcs-alert" alert-notifier-command nil args)
         (alert-message-notify info))))

     (with-eval-after-load 'alert
       (alert-define-style 'td-notifier :title "Notify using terminal-notifier"
                           :notifier #'td/alert-notifier-notify))

     (setq alert-default-style 'td-notifier)
   #+END_SRC

** avy

   #+BEGIN_SRC emacs-lisp
     (setq avy-keys '(?a ?e ?i ?o ?u ?h ?t ?d ?s ?y))
   #+END_SRC

** company

*** Enable company globally

    #+BEGIN_SRC emacs-lisp
      (global-company-mode)
    #+END_SRC

*** Use Tab and Go

    #+BEGIN_SRC emacs-lisp
      (company-tng-configure-default)
    #+END_SRC

*** Enable company in text mode too

    #+BEGIN_SRC emacs-lisp
      (spacemacs|add-company-backends
        :backends (company-capf company-dabbrev)
        :modes text-mode)
    #+END_SRC

*** Enable company in swift mode too

    #+BEGIN_SRC emacs-lisp
      (spacemacs|add-company-backends
        :backends (company-capf company-dabbrev)
        :modes swift-mode)
    #+END_SRC

*** Enable company in fish-shell mode too

    #+BEGIN_SRC emacs-lisp
      (spacemacs|add-company-backends
        :backends (company-capf company-dabbrev)
        :modes fish-mode)
    #+END_SRC

    #+RESULTS:
    | spacemacs//init-company-fish-mode | company-mode |

*** Fuzzy autocompletion

    #+BEGIN_SRC emacs-lisp
      ;(setq company-flx-limit 20)

      (add-hook 'emacs-lisp-mode-hook #'company-flx-mode)
    #+END_SRC

** compile

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'compile
   #+END_SRC

   #+NAME: Remove spacemacs default coloring function
   #+BEGIN_SRC emacs-lisp
     (setq compilation-filter-hook nil)
   #+END_SRC

   #+NAME: Set alert fade time
   #+BEGIN_SRC emacs-lisp
     (setq alert-fade-time 10)
   #+END_SRC

   #+NAME: Add swift-fastlane error format to `compilation-error-regex-alist'
   #+BEGIN_SRC emacs-lisp
       (add-to-list 'compilation-error-regexp-alist-alist
                    '(swift-fastlane "^\\(\\/.*?\\.swift\\):\\([0-9]+\\)" 1 2))
       (add-to-list 'compilation-error-regexp-alist 'swift-fastlane)
   #+END_SRC

   #+NAME: Add alert for when compilations finish
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'compilation-finish-functions
                 #'(lambda (buffer string)
                    (alert string :title "Compilation finished")))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     )
   #+END_SRC

** csv

   #+BEGIN_SRC emacs-lisp :results output
     (add-hook 'csv-mode-hook #'csv-align-fields)
   #+END_SRC

** flycheck

   #+BEGIN_SRC emacs-lisp :results output
     (setq flycheck-python-pycompile-executable "python3")
     (use-package flycheck-mode
       :config
       (setq flycheck-python-pycompile-executable "python3"))
   #+END_SRC

** helm

*** Notes

    - SPC / for search and replace, in many files!

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq helm-mode-fuzzy-match t
            helm-completion-in-region-fuzzy-match t
            helm-M-x-fuzzy-match t
            helm-buffers-fuzzy-matching t)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (setq helm-candidate-number-limit 20)
    #+END_SRC

*** C-u and C-d to scroll up and down

    #+BEGIN_SRC emacs-lisp :results output
      (with-eval-after-load 'helm
        (define-key helm-map (kbd "C-u") #'helm-previous-page)
        (define-key helm-map (kbd "C-d") #'helm-next-page))
    #+END_SRC

*** ripgrep

    Settings

    #+BEGIN_SRC emacs-lisp
      (setq helm-grep-ag-command "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s")
      (setq helm-grep-ag-pipe-cmd-switches '("--colors 'match:fg:black'" "--colors 'match:bg:yellow'"))
    #+END_SRC

** helm-ls-git

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "ff" #'helm-ls-git)
   #+END_SRC

** irc

   #+BEGIN_SRC emacs-lisp :results output
     (setq rcirc-server-alist '(("irc.freenode.net" :channels ("#emacs") :nick "nickTD")))
   #+END_SRC

** magit

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "gg" #'magit-status)
   #+END_SRC

** org

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org
   #+END_SRC

*** Load packages

    #+BEGIN_SRC emacs-lisp
      (require 'org-tempo)
      (require 'ob-shell)
    #+END_SRC

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq org-ellipsis "⤵")

      (setq org-M-RET-may-split-line nil)

      (setq org-directory "~/Dropbox/data/org/")

      (defun org-file-path (filename)
        (concat (file-name-as-directory org-directory) filename))

      (defun org-file-path-or-nil (filename)
        "Return the absolute address of an org file, given its relative name."
        (let ((file-path (org-file-path filename)))
          (if (file-exists-p file-path)
              file-path nil)))

      (setq org-default-notes-file (org-file-path "notes.org"))
      (setq org-agenda-files (cl-remove-if #'null (list org-directory
                                                        (org-file-path-or-nil "work/"))))
      (setq org-archive-location (format "%s::"
            (org-file-path "archive.org")))
    #+END_SRC

*** Add structure templates

    #+BEGIN_SRC emacs-lisp :results output
      (dolist (item '(("e" . "src emacs-lisp :results output")
                      ("ex" . "example")
                      ("s" . "src swift")
                      ("f" . "src sh :results output")
                      ("sh" . "src sh :results output")
                      ("ss" . "src")
                      ("r" . "src ruby :results output")
                      ("p" . "src python :results output")))
        (add-to-list 'org-structure-template-alist item))
    #+END_SRC

*** Turn on =auto-fill-mode= for =org-mode=
    
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook #'spacemacs/toggle-auto-fill-mode-on)
    #+END_SRC

*** Babel

    #+BEGIN_SRC emacs-lisp
      (setq org-babel-python-command "/opt/homebrew/bin/python3")
    #+END_SRC


**** Add =fish= shell to =org-babel-shell-names=

     #+BEGIN_SRC emacs-lisp
       (add-to-list 'org-babel-shell-names "fish")
       (org-babel-shell-initialize)
     #+END_SRC

**** Don't prompt me to confirm every time I want to evaluate a block.

     #+BEGIN_SRC emacs-lisp
       (setq org-confirm-babel-evaluate nil)
     #+END_SRC

**** =org-babel-execute:swift=

     #+BEGIN_SRC emacs-lisp
       (defun org-babel-execute:swift (body params)
         "Execute a block of Swift code with org-babel."
         (message "executing Swift source code block")
         (ob-swift--eval body))

       (defun ob-swift--eval (body)
         (with-temp-buffer
           (insert body)
           (shell-command-on-region (point-min) (point-max) "swift -" nil 't)
           (buffer-string)))

       (provide 'ob-swift)
     #+END_SRC

**** =org-babel-do-load-languages=
     Load languages

     #+BEGIN_SRC emacs-lisp
       (org-babel-do-load-languages
        'org-babel-load-languages
        '(
          (swift . t)
          (python . t)
          (ruby . t)

          (shell . t)
          ))
     #+END_SRC

*** THE END

    #+BEGIN_SRC emacs-lisp
    )
    #+END_SRC

** persp

   #+BEGIN_SRC emacs-lisp
     (setq persp-nil-name "@home")
   #+END_SRC

** projectile

*** =*scratch*= buffer per project

    #+BEGIN_SRC emacs-lisp
      (defun td/switch-to-project-s-scratch-buffer ()
        (interactive)
        (let ((buffer-name (format "*scratch: %S*" (projectile-project-name))))
          (if-let (buffer (get-buffer buffer-name)) ; buffer exists
              (switch-to-buffer buffer)
            (progn                            ; buffer does not exist
              (switch-to-buffer (get-buffer-create buffer-name))
              (org-mode)
              (insert (format "\
      ,#+TITLE %S

      ,#+BEGIN_SRC swift

      ,#+END_SRC

      ,#+BEGIN_SRC emacs-lisp

      ,#+END_SRC

      ,#+BEGIN_SRC python :results output

      ,#+END_SRC

      ,#+BEGIN_SRC fish :results output

      ,#+END_SRC
      " (projectile-project-name)))))))
    #+END_SRC
*** =zen=

    #+BEGIN_SRC emacs-lisp
      (defun td/zen ()
        (interactive)
        (progn
          (td/switch-to-project-s-scratch-buffer)
          (delete-other-windows)
          (td/dedicate-window-purpose)))
    #+END_SRC

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq projectile-enable-caching t)
      (setq projectile-switch-project-action #'td/zen)

      (setq projectile-tags-backend 'etags)
    #+END_SRC

*** Discover projects

    #+BEGIN_SRC emacs-lisp
      (projectile-discover-projects-in-directory "~/work")
      (projectile-discover-projects-in-directory "~/proj")
    #+END_SRC

** purpose

   #+BEGIN_SRC emacs-lisp
     (setq purpose-user-mode-purposes '((magit-mode . util)
                                        (slack-mode . util)))
     (setq purpose-user-regexp-purposes '(
                                          ;("^*scratch: [\"a-zA-Z0-9]" . edit)
                                          ))

     (with-eval-after-load 'purpose
       (purpose-compile-user-configuration))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'magit-mode-setup-hook #'td/dedicate-window-purpose)
   #+END_SRC
** refactor

   #+BEGIN_SRC emacs-lisp :results output
     (add-hook 'prog-mode-hook #'emr-initialize)
   #+END_SRC

** ruby

   #+BEGIN_SRC emacs-lisp :results output
     (use-package enh-ruby-mode)
        ;; :mode ("\\.rb\\'" "Brewfile" "Fastfile" "Appfile" "Scanfile" "Matchfile"))
   #+END_SRC

** slack

   #+BEGIN_SRC emacs-lisp
     (setq slack-prefer-current-team t
           slack-buffer-function #'switch-to-buffer)
   #+END_SRC

*** Set up slack for =work=

  #+BEGIN_SRC emacs-lisp
    (spacemacs|use-package-add-hook slack
      :post-config
      (progn
        ;; Turn off centered-point-mode in slack mode
        (add-hook 'slack-mode-hook #'(lambda () (centered-cursor-mode -1)))

        ;; Workaround for channels containing unsupported message format
        (defun sbw/slack-mode--catch-message-to-string-error (orig-fun &rest args)
          (condition-case nil
              (apply orig-fun args)
            (error "<error parsing message>\n")))

        (advice-add 'slack-message-to-string :around #'sbw/slack-mode--catch-message-to-string-error)

        (let* ((auth-info (car (auth-source-search :max 1
                                                   :user "work"
                                                   :host "slack")))

               (team-name (plist-get auth-info :team-name))
               (client-id (plist-get auth-info :client-id))
               (client-secret (plist-get auth-info :client-secret))
               (token (plist-get auth-info :token)))

          (slack-register-team
           :default t
           :name team-name
           :client-id client-id
           :client-secret client-secret
           :token token))

        (defun td/slack-update-all ()
          (interactive)
          (slack-im-list-update)
          (slack-group-list-update)
          (slack-channel-list-update))
        ))
  #+END_SRC

** swift-mode

   #+BEGIN_SRC emacs-lisp
     (setq
      swift-mode:multiline-statement-offset 4
      swift-mode:parenthesized-expression-offset 4)
   #+END_SRC

** winum

   #+begin_src emacs-lisp :results output
     (setq winum-scope 'frame-local)
   #+end_src

** yasnippet

*** Settings
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'yasnippet
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (add-hook 'text-mode-hook #'yas-minor-mode)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (setq yas-snippet-dirs '("~/.spacemacs.d/snippets"))
      (yas-reload-all)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; Bind `SPC' to `yas-expand' when snippet expansion available (it
      ;; will still call `self-insert-command' otherwise).
      (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
      (define-key yas-minor-mode-map (kbd "C-c C-c") yas-maybe-expand)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      )
    #+END_SRC

* Behaviors

** Be Zen when Emacs loads

   #+BEGIN_SRC emacs-lisp :results output
     (td/zen)
   #+END_SRC
